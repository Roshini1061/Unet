from __future__ import print_function
import tensorflow as tf
import os 
#os.environ["CUDA_VISIBLE_DEVICES"] = "0"
import numpy as np
from keras.models import *
from keras.layers import Input, merge, Conv2D, MaxPooling2D, UpSampling2D, Dropout, Cropping2D
from keras.optimizers import *
from keras.callbacks import ModelCheckpoint, LearningRateScheduler
from keras import backend as keras
from data import *
from functools import partial
from keras.models import Model
from keras.layers import Conv2D, MaxPooling2D, UpSampling2D, Dropout,Input
from keras.layers import concatenate, Conv2DTranspose, BatchNormalization
from keras.optimizers import Adam
from keras import backend as K


# compute dsc
def dice_coef(y_true, y_pred, smooth=1.):
	y_true_f = K.flatten(y_true)
	y_pred_f = K.flatten(y_pred)
	intersection = K.sum(y_true_f * y_pred_f)
	return (2. * intersection + smooth) / (K.sum(y_true_f) + K.sum(y_pred_f) + smooth)
    
def dice_coef_loss(y_true, y_pred):
	return 1.-dice_coef(y_true, y_pred)
'''
# proposed loss function
def dice_coef_loss(y_true, y_pred):
	distance = 0
	for label_index in range(num_classes):
		dice_coef_class = dice_coef(y_true[:,:,:,label_index], y_pred[:, :,:,label_index])
		distance = 1 - dice_coef_class + distance
	return distance
'''
# dsc per class
def label_wise_dice_coefficient(y_true, y_pred, label_index):
	return dice_coef(y_true[:,:,:,label_index], y_pred[:, :,:,label_index])

# get label dsc
def get_label_dice_coefficient_function(label_index):
	f = partial(label_wise_dice_coefficient, label_index=label_index)
	f.__setattr__('__name__', 'label_{0}_dice_coef'.format(label_index))	
	return f



def fire_module(x, fire_id, squeeze=16, expand=64):
	f_name = "fire{0}/{1}"
	channel_axis = 1 if K.image_data_format() == 'channels_first' else -1
	x = Conv2D(squeeze, (1, 1), activation='relu', padding='same', name=f_name.format(fire_id, "squeeze1x1"))(x)
	x = BatchNormalization(axis=channel_axis)(x)

	left = Conv2D(expand, (1, 1), activation='relu', padding='same', name=f_name.format(fire_id, "expand1x1"))(x)
	right = Conv2D(expand, (3, 3), activation='relu', padding='same', name=f_name.format(fire_id, "expand3x3"))(x)
	x = concatenate([left, right], axis=channel_axis, name=f_name.format(fire_id, "concat"))
	return x



class myUnet(object):
	def __init__(self, img_rows = 512, img_cols = 512):
		self.img_rows = img_rows
		self.img_cols = img_cols
# 参数初始化定义
	def load_data(self):
		mydata = dataProcess(self.img_rows, self.img_cols)
		imgs_train, imgs_mask_train = mydata.load_train_data()
		imgs_test = mydata.load_test_data()
		return imgs_train, imgs_mask_train, imgs_test
# 载入数据
	def get_unet(self):
		deconv_ksize=(3,3) 
		dropout=0.5
		inputs = Input((self.img_rows, self.img_cols,1))
		channel_axis = 1 if K.image_data_format() == 'channels_first' else -1
		#channel_axis=-1
		metrics = dice_coef
		include_label_wise_dice_coefficients = True;
		x01 = Conv2D(64, (3, 3), strides=(2, 2), padding='same', activation='relu', name='conv1')(inputs)
		x02 = MaxPooling2D(pool_size=(3, 3), strides=(2, 2), name='pool1', padding='same')(x01)
		x03 = fire_module(x02, fire_id=2, squeeze=16, expand=64)
		x04 = fire_module(x03, fire_id=3, squeeze=16, expand=64)
		x05 = MaxPooling2D(pool_size=(3, 3), strides=(2, 2), name='pool3', padding="same")(x04)

		x06 = fire_module(x05, fire_id=4, squeeze=32, expand=128)
		x07 = fire_module(x06, fire_id=5, squeeze=32, expand=128)
		x08 = MaxPooling2D(pool_size=(3, 3), strides=(2, 2), name='pool5', padding="same")(x07)

		x09 = fire_module(x08, fire_id=6, squeeze=48, expand=192)
		x10 = fire_module(x09, fire_id=7, squeeze=48, expand=192)
		x11 = fire_module(x10, fire_id=8, squeeze=64, expand=256)
		x12 = fire_module(x11, fire_id=9, squeeze=64, expand=256)

		if dropout != 0.0:
			x12 = Dropout(dropout)(x12)

		up1 = concatenate([
		Conv2DTranspose(192, deconv_ksize, strides=(1, 1), padding='same')(x12),
		x10,
		], axis=channel_axis)
		up1 = fire_module(up1, fire_id=10, squeeze=48, expand=192)

		up2 = concatenate([
		Conv2DTranspose(128, deconv_ksize, strides=(1, 1), padding='same')(up1),
		x08,
		], axis=channel_axis)
		up2 = fire_module(up2, fire_id=11, squeeze=32, expand=128)

		up3 = concatenate([
		Conv2DTranspose(64, deconv_ksize, strides=(2, 2), padding='same')(up2),
		x05,
		], axis=channel_axis)
		up3 = fire_module(up3, fire_id=12, squeeze=16, expand=64)

		up4 = concatenate([
		Conv2DTranspose(32, deconv_ksize, strides=(2, 2), padding='same')(up3),
		x02,
		], axis=channel_axis)
		up4 = fire_module(up4, fire_id=13, squeeze=16, expand=32)
		up4 = UpSampling2D(size=(2, 2))(up4)

		x = concatenate([up4, x01], axis=channel_axis)
		x = Conv2D(64, (3, 3), strides=(1, 1), padding='same', activation='relu')(x)
		x = UpSampling2D(size=(2, 2))(x)
		x = Conv2D(2, (1, 1), activation='softmax')(x)

		model = Model(inputs = inputs, outputs = x)
		if not isinstance(metrics, list):
			metrics = [metrics]
    
		if include_label_wise_dice_coefficients and 2 > 1:
			label_wise_dice_metrics = [get_label_dice_coefficient_function(index) for index in range(2)]
			if metrics:
		    		metrics = metrics + label_wise_dice_metrics
			else:
		    		metrics = label_wise_dice_metrics

		model.compile(optimizer = Adam(lr = 1e-4), loss = 'binary_crossentropy', metrics = ['accuracy'])
		return model


		
		return model

# 如果需要修改输入的格式，那么可以从以下开始修改，上面的结构部分不需要修改
	def train(self):
		print("loading data")
		imgs_train, imgs_mask_train, imgs_test = self.load_data()
		print("loading data done")
		model = self.get_unet()
		print("got unet")
		model_checkpoint = ModelCheckpoint('my_unet.hdf5', monitor='loss',verbose=1, save_best_only=True)
		print('Fitting model...')
		model.fit(imgs_train, imgs_mask_train, batch_size=2, epochs=2, verbose=1,validation_split=0.2, shuffle=True, callbacks=[model_checkpoint])
		print('predict test data')
		imgs_mask_test = model.predict(imgs_test, batch_size=2, verbose=1)
		np.save('/content/drive/My Drive/Unet-master/results/imgs_mask_test.npy', imgs_mask_test)

	def save_img(self):
    print("array to image")
    imgs = np.load('/content/drive/My Drive/Unet-master/results/imgs_mask_test.npy')
		for i in range(imgs.shape[0]):
			img = imgs[i]
      img = img.convert('1')
      img = array_to_img(img)
			img.save("/content/drive/My Drive/Unet-master/results/%d.jpg"%(i+1))

if __name__ == '__main__':
	myunet = myUnet()
	myunet.train()
	myunet.save_img()
